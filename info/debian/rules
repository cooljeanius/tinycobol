#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.
 

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# para o dpatch
include /usr/share/dpatch/dpatch.make

# These are used for cross-compiling and for saving the configure script
# # from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
#
#
CFLAGS = -Wall -g
#
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
else
	CFLAGS += -O2
endif

# shared library versions, option 1
# version=2.0.5
# major=2
# option 2, assuming the library is created as src/.libs/libfoo.so.2.0.5 or so
# version=`ls src/.libs/lib*.so.* | \
# awk '{if (match($$0,/[0-9]+\.[0-9]+\.[0-9]+$$/)) print substr($$0,RSTART)}'`
# major=`ls src/.libs/lib*.so.* | \
#  awk '{if (match($$0,/\.so\.[0-9]+$$/)) print substr($$0,RSTART+4)}'`


config.status: patch configure
	dh_testdir
	# Add here commands to configure the package.
	CFLAGS="$(CFLAGS)" ./configure --host=$(DEB_HOST_GNU_TYPE) --build=$(DEB_BUILD_GNU_TYPE) --prefix=/usr --mandir=\$${prefix}/share/man --infodir=\$${prefix}/share/info --enable-mfcomp
	
build: build-stamp
build-stamp:  config.status
	@echo "--- Compiling"
	dh_testdir

	# Add here commands to compile the package.
	#$(MAKE)

	touch build-stamp

clean:  clean1 unpatch
clean1:
	 @echo "--- Cleaning"
	dh_testdir
	dh_testroot
	rm -f build-stamp

	# Add here commands to clean up after the build process.
	-$(MAKE) distclean
ifneq "$(wildcard /usr/share/misc/config.sub)" ""
	cp -f /usr/share/misc/config.sub config.sub
endif
ifneq "$(wildcard /usr/share/misc/config.guess)" ""
	cp -f /usr/share/misc/config.guess config.guess
endif

	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	# Add here commands to install the package into debian/tmp.
	$(MAKE) install prefix=`pwd`/debian/tmp/usr
	cp test.code `pwd`/debian/tmp/usr/share/doc/tinycobol/ -r
	cp test_suite `pwd`/debian/tmp/usr/share/doc/tinycobol/ -r
	mkdir `pwd`/debian/tmp/usr/share/doc/tinycobol/html
	cp info/*.html `pwd`/debian/tmp/usr/share/doc/tinycobol/html -r
	cd `pwd`/lib; $(MAKE) shared-libs prefix=`pwd`/debian/tmp/usr/lib
	mv `pwd`/lib/libhtcobol.* `pwd`/debian/tmp/usr/lib

# Build architecture-independent files here.
binary-indep: build install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: build install
#	dh_testversion
	dh_movefiles --sourcedir=debian/tmp #-p libhtcobol-dev
	dh_testdir
	dh_testroot
#	dh_installdebconf
	dh_installdocs 
#	dh_installexamples
#	dh_installmenu
#	dh_installemacsen
#	dh_installpam
#	dh_installinit
#	dh_installcron
	dh_installman
	dh_installinfo 
#	dh_undocumented
	dh_installchangelogs ChangeLog
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
	# You may want to make some executables suid here.
#	dh_suidregister
	dh_makeshlibs
	dh_installdeb
#	dh_perl
	dh_shlibdeps 
	dh_gencontrol
	dh_md5sums
	dh_builddeb

#patch: patch-stamp
#patch-stamp:
#	dpatch apply-all
#	dpatch call-all -a=pkg-info >patch-stamp
	
#unpatch:
#	dpatch deapply-all
#	rm -rf patch-stamp debian/patched
		

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install patch unpatch \
        clean1
